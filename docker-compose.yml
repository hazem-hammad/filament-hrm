services:
    # PHP Service

    # app is the name of the PHP service
    app:
        build:
            context: . # that's means the Dockerfile in the same directory of the docker-compose.yml
            dockerfile: ./docker/php/Dockerfile
        container_name: ${APP_NAME:-filament_hrm}_app
        # This option will restart the container if it stops for any reason other than the user explicitly stopping it using (docker stop app).
        # The default is no, which means that the container will not automatically restart in the event of a failure.
        # Available options are on-failure, always, unless-stopped, and no .
        restart: unless-stopped

        # /var/www is the working directory which will includes the project files inside the container
        # Also it's the default directory for any command execution such as composer or artisan
        working_dir: /var/www
        # The volumes option is used to mount the project files from the host machine to the container to keep the files in sync between the host and the container.
        # The first part of the volume is the path to the project files on the host machine, and the second part is the path to the project files inside the container.
        # The sync is two-way, which means that any changes made to the files on the host machine will be reflected in the container and vice versa.
        volumes:
            - .:/var/www
            - ./docker/php/php.ini:/usr/local/etc/php/php.ini
        networks:
            - app-network
        command: ["/bin/bash", "-c", "/usr/local/bin/init.sh && php-fpm"]
        ports:
            - "5173:5173"  # Expose Vite development server port
        depends_on:
            - redis
        environment:
            - REDIS_HOST=redis
            - REDIS_PORT=6379

    # nginx Service
    webserver:
        build:
            context: .
            dockerfile: ./docker/nginx/Dockerfile
        container_name: ${APP_NAME:-filament_hrm}_webserver
        # restart: unless-stopped
        volumes:
            - ./:/var/www
            - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
            - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf

        # ports: This configuration in the Docker Compose file is used to map ports between the host machine and the container.
        # This means that port 8080 on the host machine is mapped to port 80 inside the container.
        # When you visit http://localhost:8080 in your browser, it forwards the request to port 80 inside the container, which serves your application.
        ports:
            - "8080:80"
        networks:
            - app-network

    # MySQL Service
    mysql:
        image: mysql:8.0
        container_name: ${APP_NAME:-filament_hrm}_mysql
        # restart: unless-stopped
        environment:
          MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
          MYSQL_DATABASE: project_database
        ports:
            - "3306:3306"
        volumes:
            - mysql_data:/var/lib/mysql
        networks:
            - app-network

    # PHPMyAdmin Service
    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        container_name: ${APP_NAME:-filament_hrm}_phpmyadmin
        restart: unless-stopped
        environment:
            PMA_HOST: mysql
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
            UPLOAD_LIMIT: 100M
            PMA_UPLOAD_LIMIT: 100M
            MAX_EXECUTION_TIME: 3600
            PMA_MAX_EXECUTION_TIME: 3600
            PMA_ABSOLUTE_UPLOAD_LIMIT: 512
        ports:
            - "8081:80"
        networks:
            - app-network

    # Mailpit Service
    mailpit:
        image: axllent/mailpit
        container_name: ${APP_NAME:-filament_hrm}_mailpit
        restart: unless-stopped
        ports:
            - "8082:8025"
        networks:
            - app-network

    # Redis Service
    redis:
        image: redis:7
        container_name: ${APP_NAME:-default}_redis
        restart: unless-stopped
        ports:
            - "6379:6379"
        networks:
            - app-network
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            retries: 5

    # RedisInsight (Web UI for Redis)
    redisinsight:
        image: redis/redisinsight:latest
        container_name: ${APP_NAME:-default}_redisinsight
        restart: unless-stopped
        ports:
            - "8083:5540" # Access RedisInsight via http://localhost:8083
        networks:
            - app-network
        depends_on:
            - redis

# Networks
networks:
    app-network:

volumes:
    mysql_data:
